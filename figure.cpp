/*
为了计算的精确，有时候光保存计算结果的整数部分是不够的，这时候就需要使用浮点数了。C++中有3种浮点类型：float、double和long double，均为有符号浮点数。

典型的C++浮点类型
类型名	名称	存储长度	可表示的最小非0的绝对值	可表示的最大的绝对值
float	浮点型	4字节	1.175494351 E – 38	3.402823466 E + 38
double	双精度型	8字节	2.2250738585072014 E – 308	1.7976931348623158 E + 308
long double	长双精度型	8字节	2.2250738585072014 E – 308	1.7976931348623158 E + 308
浮点类型数据可以参与算术运算、关系运算、逻辑运算等。计算机有两套算术运算的单元：整型的和浮点类型的。如果两个操作数都是整型数据，则系统采用整型运算，运算结果也是整数。如果有一个操作数是浮点数，系统就会使用浮点运算，浮点运算的结果也是浮点数。

表达式中操作数的类型不同时，系统会自动进行隐式类型转换，使表达式中的数据类型一致。算术表达式中隐式类型转换规则为：把不同类型的数据转换成精度最高、占用内存最多的那个数据的类型。赋值表达式中，会自动将赋值运算符右边表达式的值的类型转换成左边变量的类型，这种转换可能会丢失数据的精度。

例如，如果两个操作数一个是整型数，一个是浮点数，系统会先对整型数进行类型转换，转换为等值的浮点数，然后再计算。例如：

// 隐式类型转换,系统会先把整数2转换成浮点数2.0，然后再做加法运算
float x = 2 + 3.4;
强制类型转换：也叫显式类型转换，它把表达式值的类型强制转换成指定的类型。例如：

(double)3/2

先将3转换成double类型的3.0，然后计算3.0/2，由于2是整型，计算之前需要进行隐式类型转换，将2也转换成double类型的2.0。


据说一个成年人的标准体重是其身高（单位：cm）减去100，然后再乘以0.9所得到的公斤数。而一个人身材是否标准则是指TA的真实体重是否在标准体重的加减10%之内。

本关要求输入某人的身高（cm），然后计算TA要保持标准身材体重的上限和下限（单位：kg），分别存入变量up和low中。（顺便测测自己的身材……）
*/
// 包含标准输入输出函数库
#include <stdio.h>

// 定义main函数
int main()
{
    float up, low;
    // 请在此添加代码，输入身高，计算标准身材的体重上下限
    /********** Begin *********/
    float h;
	scanf("%f",&h);
	
    low = (h - 100)*0.9*0.9;
    up = (h - 100)*0.9*1.1;
    
    /********** End **********/

    // 输出标准身材的体重上下限
    printf("体重范围为：%.2f -- %.2f\n",low,up);
    return 0;
}
