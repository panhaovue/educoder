/*

存储英文字母需要用到字符型变量。C++将字符类型看成是一种短整型，每个字符数据对应一个整数值。
如Microsoft C++中的字符类型的取值集合为ASCII字符集，ASCII为每个合法的字符定义了一个整数，该整数就是该字符在字符类型中的数值表示。

C++中有3种字符类型：char、signed char和unsigned char。

典型的C++符类型
类型名	          名称	      存储长度	表示范围
char	        字符型	        1字节	   -128 ~ 127
signed char	    有符号字符型	 1字节	-128 ~ 127
unsigned char	无符号字符型	 1字节	0 ~ 255
由于C++将字符类型作为小整数处理，所以可以通过修改一个字符变量中的整数值来修改其中的字符。由于ASCII码表中26个大写英文字母是连续顺序排列的，也就是说字符'B'代表的整数比字符'A'代表的整数值大1，……字符'Z'代表的整数值比字符'Y'代表的整数值大1，所以可以有下面的程序：

// 定义字符变量ch并初始化为字符'B'，ch中存储的是'B'对应的整数
char ch = 'B';
// 将ch中的整数加3，里面的整数变成了'E'对应的整数
ch = ch + 3;
// 输出字符'E'
cout << ch << endl;
修改字符变量里面的值可能使它对应的字符不再是大写字母（可能是ASCII码表中排在大写字母后面的其它字符），这时候我们需要根据条件去完成不同的操作（例如使字符'Z'加1后变成字符'A'和使字符'A'加1后变成字符'B'需要执行不同的操作）。



本关要求对26个大写英文字母进行循环加密，输入一个大写英文字母（明文）和一个整数秘钥，输出用秘钥对该大写英文字母加密后的结果（密文）。

其中加密规则是：将26个大写英文字母组成一个圆环（'A'后面是'B'，……'Z'后面是'A'）, 将明文字母往前走秘钥设定的步数就得到了密文。
例如：秘钥是2时，'A'加密后得到'C'，'Z'加密后得到'B'。
*/

// 包含两种I/O库，可以使用任一种输入输出方式
#include <stdio.h>
#include <iostream>
using namespace std;

int main()
{
    // c-存储输入的大写字母,d-存储加密后的大写字母
    char c, d;

    // step-秘钥，往前走的步数，大于等于，小于
    int step;

    // 请在此添加代码，输入明文、秘钥，计算密文存入d中
    /********** Begin *********/
	c = getchar();
    cin>>step;
    if(c +step > 90){
    	int over = (c+step) - 91;
    	d = 65 + over;
    }else{
    	
    	d = c +step;
	}

    /********** End **********/

    // 输出密文
    cout << d;
    return 0;
}
