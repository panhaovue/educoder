/*
C++程序中，每个数据对象都必须有确定的数据类型。这是为什么呢？

我们知道，计算机内存中的数据都是0|1串，例如下面这16位0|1组成的串。那么这个0|1串到底代表什么意思呢？
01000001 01000010

同样的这一段0|1串，如果是8位小整数，则是两个整数65和66；如果是字符，则是'A'和'B'；如果是16位整数，则是16706。同一串数据，赋予不同的类型就有不同的解释，就代表了不同的含义，所以数据对象都必须有确定的数据类型。

C++有四种基本数据类型：整型、浮点型、字符型和布尔型。这里我们进一步介绍一下整形和浮点型。

整型
C++的整型数据分为有符号和无符号两类，每类又包含几种类型。不同的C++编译器对同一种数据类型的表示方式可能会有不同。

典型的C++整型类型

类别	类型名	简写	名称	存储长度	表示范围
有符号	signed short int	Short	有符号短整型	2字节	-32768~32767
有符号	signed int	Int	有符号整型	4字节	-2147483648~2147483647
有符号	signed long int	Long	有符号长整型	4字节	-2147483648~2147483647
无符号	unsigned short int	unsigned short	无符号短整型	2字节	0~65535
无符号	unsigned int	unsigned	无符号整型	4字节	0~4294967295
无符号	unsigned long int	unsigned long	无符号长整型	4字节	0~4294967295
整型数据可以参与算术运算、关系运算、逻辑运算、位运算等。整数的加法、减法、乘法和数学中的算术运算一致，而除法略有不同。例如：

// 声明整型变量a、b、c，并对b、c进行初始化
int a = 23, b = 8, c;
// 计算a除以b并将结果存入c中
c = a / b;
// 输出c的值为：2
printf("%d\n",c);
23/8的结果为2，而不是2.875。这是因为两个整数相除，采用的是整数除法，结果也是整数。而且不是四舍五入的整数，而是直接截掉小数部分的整数。

浮点型
具有浮点型的数叫浮点数，也常常被称为双精度数或实数。如果要得到除法结果的小数部分，需要使用浮点数除法。只要除数和被除数其中有一个是浮点数，系统就会使用浮点数除法。例如：

float f = 123 / 23.0;
// 输出5.347826
printf("%f\n",f);
其中，23.0为浮点数，所以123/23.0采用浮点数除法，结果也是浮点数（存入到浮点变量f中）。使用printf输出时，采用的转换说明符也是相应的%f。

对于用户输入的苹果总数m和总人数n，计算每个人平均可以分到多少个苹果，并以“人均苹果数为：num”的格式输出，其中num即每个人平均分得的苹果数。
*/


// 包含标准输入输出函数库
#include <stdio.h>

// 定义main函数
int main()
{
    // 定义变量，m-苹果数，n-人数，x-人均苹果数
    int m, n, x;

    // 请在此添加代码，输入苹果数、人数，并计算人均苹果数
    /********** Begin *********/
	scanf("%d%d",&m,&n);
    x = m/n;

    /********** End **********/

    // 输出人均苹果数
    printf("人均苹果数为：%d",x);
    return 0;
}

